// Generated by Dagger (https://dagger.dev).
package com.example.livecricketdemo.di;

import android.content.Context;
import com.example.livecricketdemo.network.interceptor.NetworkInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_GetNetworkInterceptorFactory implements Factory<NetworkInterceptor> {
  private final NetworkModule module;

  private final Provider<Context> appContextProvider;

  public NetworkModule_GetNetworkInterceptorFactory(NetworkModule module,
      Provider<Context> appContextProvider) {
    this.module = module;
    this.appContextProvider = appContextProvider;
  }

  @Override
  public NetworkInterceptor get() {
    return getNetworkInterceptor(module, appContextProvider.get());
  }

  public static NetworkModule_GetNetworkInterceptorFactory create(NetworkModule module,
      Provider<Context> appContextProvider) {
    return new NetworkModule_GetNetworkInterceptorFactory(module, appContextProvider);
  }

  public static NetworkInterceptor getNetworkInterceptor(NetworkModule instance,
      Context appContext) {
    return Preconditions.checkNotNullFromProvides(instance.getNetworkInterceptor(appContext));
  }
}
