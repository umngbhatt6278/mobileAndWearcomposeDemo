// Generated by Dagger (https://dagger.dev).
package com.example.livecricketdemo.di;

import android.content.Context;
import com.ComposeDemoApp.util.DeviceUtil;
import com.ComposeDemoApp.util.PreferenceProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_GetDeviceUtilFactory implements Factory<DeviceUtil> {
  private final NetworkModule module;

  private final Provider<Context> appContextProvider;

  private final Provider<PreferenceProvider> preferenceProvider;

  public NetworkModule_GetDeviceUtilFactory(NetworkModule module,
      Provider<Context> appContextProvider, Provider<PreferenceProvider> preferenceProvider) {
    this.module = module;
    this.appContextProvider = appContextProvider;
    this.preferenceProvider = preferenceProvider;
  }

  @Override
  public DeviceUtil get() {
    return getDeviceUtil(module, appContextProvider.get(), preferenceProvider.get());
  }

  public static NetworkModule_GetDeviceUtilFactory create(NetworkModule module,
      Provider<Context> appContextProvider, Provider<PreferenceProvider> preferenceProvider) {
    return new NetworkModule_GetDeviceUtilFactory(module, appContextProvider, preferenceProvider);
  }

  public static DeviceUtil getDeviceUtil(NetworkModule instance, Context appContext,
      PreferenceProvider preferenceProvider) {
    return Preconditions.checkNotNullFromProvides(instance.getDeviceUtil(appContext, preferenceProvider));
  }
}
