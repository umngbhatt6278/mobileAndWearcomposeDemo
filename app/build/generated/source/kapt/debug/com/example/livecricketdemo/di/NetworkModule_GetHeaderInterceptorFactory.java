// Generated by Dagger (https://dagger.dev).
package com.example.livecricketdemo.di;

import com.ComposeDemoApp.util.DeviceUtil;
import com.ComposeDemoApp.util.PreferenceProvider;
import com.example.livecricketdemo.network.interceptor.HeaderInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_GetHeaderInterceptorFactory implements Factory<HeaderInterceptor> {
  private final NetworkModule module;

  private final Provider<DeviceUtil> deviceUtilProvider;

  private final Provider<PreferenceProvider> preferenceProvider;

  public NetworkModule_GetHeaderInterceptorFactory(NetworkModule module,
      Provider<DeviceUtil> deviceUtilProvider, Provider<PreferenceProvider> preferenceProvider) {
    this.module = module;
    this.deviceUtilProvider = deviceUtilProvider;
    this.preferenceProvider = preferenceProvider;
  }

  @Override
  public HeaderInterceptor get() {
    return getHeaderInterceptor(module, deviceUtilProvider.get(), preferenceProvider.get());
  }

  public static NetworkModule_GetHeaderInterceptorFactory create(NetworkModule module,
      Provider<DeviceUtil> deviceUtilProvider, Provider<PreferenceProvider> preferenceProvider) {
    return new NetworkModule_GetHeaderInterceptorFactory(module, deviceUtilProvider, preferenceProvider);
  }

  public static HeaderInterceptor getHeaderInterceptor(NetworkModule instance,
      DeviceUtil deviceUtil, PreferenceProvider preferenceProvider) {
    return Preconditions.checkNotNullFromProvides(instance.getHeaderInterceptor(deviceUtil, preferenceProvider));
  }
}
